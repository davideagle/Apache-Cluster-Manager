#!/usr/bin/python
# -*- coding: iso-8859-15 -*-
# Copyright 2011 Nicolas Maupu
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

## Package acm.acm
##
from core import *
from parser import *
from urllib2 import URLError
from optparse import OptionParser, OptionGroup
from functional import curry

_help_message='use -h or --help for help'
ERROR_NO_CONF='Give me a configuration file, %s' % _help_message
ERROR_NO_CMD='No command specified, %s' % _help_message

## Options definition
parser = OptionParser()
parser.add_option('-c', '--conf', dest='conf', \
  help='Specify configuration file')

group_set = OptionGroup(parser, "Setter options")
group_set.add_option('--lf', dest='lf', action='store', type='int', \
  help='Set load factor')
group_set.add_option('--ls', dest='ls', action='store', type='int', \
  help='Set lbset')
group_set.add_option('--wr', dest='wr', action='store', type='string', \
  help='Set route')
group_set.add_option('--rr', dest='rr', action='store', type='string', \
  help='Set route redirect')
group_set.add_option('--dw', dest='dw', action='store', type='choice', choices=('Enable', 'Disable'), \
  help='Set worker status (Enable|Disable)')
group_set.add_option('--lfn', dest='w_lf', action='store', type='int', \
  help='Set load factor (Apache 2.4.x +)')
group_set.add_option('--lsn', dest='w_ls', action='store', type='int', \
  help='Set lbset (Apache 2.4.x +)')
group_set.add_option('--wrn', dest='w_wr', action='store', type='string', \
  help='Set route (Apache 2.4.x +)')
group_set.add_option('--rrn', dest='w_rr', action='store', type='string', \
  help='Set route redirect (Apache 2.4.x +)')
group_set.add_option('--wig', dest='w_status_I', action='store', type='choice', choices=('True', 'False'), \
  help='Set worker Ignore status (True|False) (Apache 2.4.x +)')
group_set.add_option('--wdr', dest='w_status_N', action='store', type='choice', choices=('True', 'False'), \
  help='Set worker Drain status (True|False) (Apache 2.4.x +)')
group_set.add_option('--wdi', dest='w_status_D', action='store', type='choice', choices=('True', 'False'), \
  help='Set worker Disable status (True|False) (Apache 2.4.x +)')
group_set.add_option('--wsb', dest='w_status_H', action='store', type='choice', choices=('True', 'False'), \
  help='Set worker Standby status (True|False) (Apache 2.4.x +)')

group_cmd = OptionGroup(parser, "Command options")
group_cmd.add_option('-i', '--info', dest='cmd', action='store_const', const="info", \
  help='Display clusters information')
group_cmd.add_option('-s', '--set', dest='cmd', action='store_const', const="set", \
  help='Set one or more vars on workers (do not forget to apply selection filters)')

group_selection = OptionGroup(parser, "Selection options (regular expression is possible)")
group_selection.add_option('-b', '--balancer-name', dest='lb_filter', default='.*', \
  help='Filter by balancer name')
group_selection.add_option('-r', '--route', dest='route_filter', default='.*', \
  help='Filter by route')
group_selection.add_option('-w', '--worker', dest='worker_filter', default='.*', \
  help='Filter by worker URL')
group_selection.add_option('-v', '--vhost', dest='vhost_filter', default='.*', \
  help='Filter by vhost name')
group_selection.add_option('-u', '--cluster', dest='cluster_filter', default='.*', \
  help='Filter by cluster name')

parser.add_option_group(group_cmd)
parser.add_option_group(group_set)
parser.add_option_group(group_selection)

## Options parsing
(opts, args) = parser.parse_args()

##
if not opts.conf:
  sys.stderr.write("Error: %s\n" % ERROR_NO_CONF)
  sys.exit(1)
else:
  ## Getting config and fetch current values
  configParser = ConfigParser(opts.conf)
  clusters = configParser.readConf()
  for c in iter(clusters):
    for s in iter(c.servers):
      map(curry(process_server_vhost, s), s.vhosts)
  ## Applying filters if specified
  acm_filter(clusters, filter_cluster=opts.cluster_filter, \
                       filter_vhost=opts.vhost_filter, \
                       filter_lbname=opts.lb_filter, \
		       filter_route=opts.route_filter, \
		       filter_worker=opts.worker_filter)

def convertTrueFalse(boolStr):
  if boolStr == 'True':
    return '1'
  elif boolStr == 'False':
    return '0'
  else:
    return None

if opts.cmd == 'info':
  acm_print(clusters)
elif opts.cmd == 'set':
  #acm_set(clusters, lf=opts.lf, ls=opts.ls, wr=opts.wr, rr=opts.rr, dw=opts.dw)
  acm_set(clusters, lf=opts.lf, ls=opts.ls, wr=opts.wr, rr=opts.rr, dw=opts.dw, w_lf=opts.w_lf, w_ls=opts.w_ls, w_wr=opts.w_wr, w_rr=opts.w_rr, w_status_I=convertTrueFalse(opts.w_status_I), w_status_N=convertTrueFalse(opts.w_status_N), w_status_D=convertTrueFalse(opts.w_status_D), w_status_H=convertTrueFalse(opts.w_status_H))
else:
  sys.stderr.write("Error: %s\n" % ERROR_NO_CMD)

